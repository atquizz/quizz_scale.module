<?php

/**
 * Sponsored by: Norwegian Centre for Telemedicine
 * Code: falcon
 *
 * @file
 * Scale Install (a quiz question type)
 */

/**
 * Implements hook_install().
 */
function quizz_scale_install() {
  variable_set('node_options_scale', array('status'));
}

/**
 * Implements hook_schema().
 */
function quizz_scale_schema() {
  $schema['quiz_scale_collections'] = array(
      'description' => 'Answer collection ids and properties',
      'fields'      => array(
          'id'            => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_type' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => '', 'description' => 'The {quiz_question_type}.type of this collection.'),
          'name'          => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The machine-readable name of this collection.'),
          'label'         => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => '', 'description' => 'The human-readable name of this collection.'),
          'uid'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Author ID of collection.'),
          'for_all'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => '1 for global presets, 0 otherwise'),
          'data'          => array('type' => 'text', 'not null' => FALSE, 'size' => 'big', 'serialize' => TRUE, 'description' => 'A serialized array of additional data related to this collection.'),
          'module'        => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The name of the providing module if the entity has been defined in code.'),
          'status'        => array('type' => 'int', 'not null' => FALSE, 'default' => 0x01, 'size' => 'tiny', 'description' => 'The exportable status of the entity.'),
      ),
      'primary key' => array('id'),
      'indexes'     => array(
          'question_type'     => array('question_type'),
          'collection_name'   => array('name'),
          'collection_status' => array('status'),
      ),
  );

  $schema['quiz_scale_question'] = array(
      'description' => 'Properties specific to this question type. Holds information about what answer collection this question uses',
      'fields'      => array(
          'qid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Question ID'),
          'vid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Question VID'),
          'answer_collection_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('qid', 'vid'),
  );

  $schema['quiz_scale_answer'] = array(
      'description' => 'Holds all the possible answers and what answer collections they belong to',
      'fields'      => array(
          'id'                   => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer_collection_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer'               => array('type' => 'text'),
      ),
      'primary key' => array('id'),
  );

  $schema['quiz_scale_user_answers'] = array(
      'description' => 'Store the users answers',
      'fields'      => array(
          'answer_id'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'result_id'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_qid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array(
          'result_id', 'question_qid', 'question_vid'
      ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function quizz_scale_uninstall() {
  variable_del('scale_max_num_of_alts');
  cache_clear_all('variables', 'cache');
  drupal_set_message(t('The Scale module has been uninstalled. Scale nodes may still exist, but they will not function properly.'));
}

/**
 * Implements hook_quiz_question_upgrade_schema_node_to_entity().
 */
function quizz_scale_quiz_question_upgrade_schema_node_to_entity() {
  if (db_table_exists('quiz_scale_question')) {
    return;
  }

  db_rename_table('quiz_scale_node_properties', 'quiz_scale_question');

  $spec_1 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  $spec_2 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  db_change_field('quiz_scale_question', 'nid', 'qid', $spec_1);
  db_change_field('quiz_scale_user_answers', 'question_nid', 'question_qid', $spec_2);

  db_rename_table('quiz_scale_answer_collection', 'quiz_scale_collections');
  db_add_field('quiz_scale_collections', 'name', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The machine-readable name of this collection.'));
  db_add_field('quiz_scale_collections', 'label', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'The human-readable name of this collection.'));
  db_add_field('quiz_scale_collections', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Author ID of collection.'));
  db_add_field('quiz_scale_collections', 'data', array('type' => 'text', 'not null' => FALSE, 'size' => 'big', 'serialize' => TRUE, 'description' => 'A serialized array of additional data related to this collection.'));
  db_add_field('quiz_scale_collections', 'module', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The name of the providing module if the entity has been defined in code.'));
  db_add_field('quiz_scale_collections', 'status', array('type' => 'int', 'not null' => TRUE, 'default' => 0x01, 'size' => 'tiny', 'description' => 'The exportable status of the entity.'));
  db_add_field('quiz_scale_collections', 'question_type', array('type' => 'varchar', 'length' => 32, 'not null' => FALSE, 'default' => '', 'description' => 'The {quiz_question_type}.type of this collection.'));
  db_add_index('quiz_scale_collections', 'question_type', array('question_type'));
  db_add_index('quiz_scale_collections', 'collection_name', array('name'));
  db_add_index('quiz_scale_collections', 'collection_status', array('status'));
  drupal_static_reset();
  drupal_flush_all_caches();
}

/**
 * Implements hook_quiz_question_upgrade_pre_drop_temp_columns().
 */
function quizz_scale_quiz_question_upgrade_pre_drop_temp_columns() {
  if (db_field_exists('quiz_question_revision', 'node_vid')) {
    // quiz_scale_question
    db_query(
      "UPDATE {quiz_scale_question} as sp"
      . " INNER JOIN {quiz_question_revision} qr ON sp.vid = qr.node_vid"
      . " SET sp.qid = qr.qid, sp.vid = qr.vid"
      . " WHERE 1"
    );

    // quiz_scale_user_answers
    db_query(
      "UPDATE {quiz_scale_user_answers} as ua"
      . " INNER JOIN {quiz_question_revision} qr ON ua.question_vid = qr.node_vid"
      . " SET ua.question_qid = qr.qid, ua.question_vid = qr.vid"
      . " WHERE 1"
    );
  }
}

/**
 * Make sure update script from main module is run before all.
 */
function quizz_scale_update_7600() {
  require_once drupal_get_path('module', 'quizz_question') . '/quizz_question.install';
  return quizz_question_update_7600();
}

/**
 * Convert global configuration for questions to question type entity.
 */
function quizz_scale_update_7601() {
  foreach (quizz_question_get_types() as $question_type) {
    if ('scale' === $question_type->handler) {
      $question_type
        ->setConfig('scale_max_num_of_alts', variable_get('scale_max_num_of_alts', 10))
        ->save()
      ;
    }
  }
}

/**
 * Add more columns for {quiz_scale_collections}
 */
function quizz_scale_update_7602() {
  // Create default name for current collections
  $collections = entity_load('scale_collection', FALSE, array());
  foreach ($collections as $collection) {
    $collection->module = 'scale';
    $collection->name = 'collection_' . $collection->id;
    if (1 < count($collection->alternatives)) {
      $options = $collection->alternatives;
      $first = array_shift($options);
      $last = array_pop($options);
      $collection->label = "{$first} - {$last}";
    }
    $collection->save();
  }

  // collection name is not required column
  db_change_field('quiz_scale_collections', 'name', 'name', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'description' => 'The machine-readable name of this collection.'));
}

/**
 * Update data per structure changed for scale collection.
 */
function quizz_scale_update_7603() {
  $rows = db_select('quiz_scale_user')
    ->fields('quiz_scale_user')
    ->orderBy('answer_collection_id')
    ->execute()
    ->fetchAll();

  foreach ($rows as $row) {
    db_update('quiz_scale_collections')
      ->fields(array('uid' => $row->uid))
      ->condition('id', $row->answer_collection_id)
      ->execute();
  }
}

/**
 * Drop {quiz_scale_user}
 */
function quizz_scale_update_7604() {
  $rows = db_query('SELECT * FROM {quiz_scale_user} WHERE 1')->fetchAll();
  foreach ($rows as $row) {
    if ($collection = entity_load_single('scale_collection', $row->answer_collection_id)) {
      $collection->uid = $row->uid;
      $collection->save();
    }
  }
  db_drop_table('quiz_scale_user');
}

/**
 * Add {quiz_scale_collections}.question_type and missing indexes
 */
function quizz_scale_update_7605() {
  $handler = db_field_exists('quiz_question_type', 'plugin') ? 'plugin' : 'handler';
  if ($question_types = entity_load('quiz_question_type', FALSE, array($handler => 'scale'))) {
    $question_type = reset($question_types);
    db_update('quiz_scale_collections')
      ->fields(array('question_type' => $question_type->type))
      ->execute()
    ;
  }
  db_change_field('quiz_scale_collections', 'question_type', 'question_type', array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => '', 'description' => 'The {quiz_question_type}.type of this collection.'));
}
